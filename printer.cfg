# MP3DP Klipper Config

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA5
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA6
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: ^PA7
position_endstop: 0.0
position_max: 250

[manual_stepper stepper_a]
step_pin: tt_mcu:PC2
dir_pin: tt_mcu:PB9
enable_pin: !tt_mcu:PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^tt_mcu:PA5

[manual_stepper stepper_b]
step_pin: tt_mcu:PB8
dir_pin: tt_mcu:PB7
enable_pin: !tt_mcu:PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^tt_mcu:PA6

[extruder]
max_extrude_only_distance: 100.0
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
rotation_distance: 34.406
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
control: pid
# tuned for stock hardware with 200 degree Celsius target
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 250

[heater_bed]
heater_pin: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control: pid
# tuned for stock hardware with 50 degree Celsius target
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[fan]
pin: PA0

[mcu]
serial: /dev/serial/by-path/platform-3f980000.usb-usb-0:1.3:1.0-port0
restart_method: command

[mcu tt_mcu]
serial: /dev/serial/by-path/platform-3f980000.usb-usb-0:1.2:1.0-port0
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[display]
lcd_type: st7920
cs_pin: PB12
sclk_pin: PB13
sid_pin: PB15
encoder_pins: ^PB14, ^PB10
click_pin: ^!PB2

[idle_timeout]
gcode:
  TURN_OFF_HEATERS
timeout: 300

[gcode_macro MOVE_TURN]
description: Rotate the turn by <ANGLE> deg
variable_turn: 0
gcode:
  {% set angle = params.ANGLE|float %}
  {% set current_turn = printer["gcode_macro MOVE_TURN"].turn %}
  {% set rel_move = (angle - current_turn) * 39.5 / 180 %}
  MANUAL_STEPPER STEPPER=stepper_a SET_POSITION=0 MOVE={rel_move}
  {% set tilt_rel_move = -rel_move %}
  MANUAL_STEPPER STEPPER=stepper_b SET_POSITION=0 SPEED=10 MOVE={tilt_rel_move}
  SET_GCODE_VARIABLE MACRO=MOVE_TURN VARIABLE=turn VALUE={angle}

[gcode_macro RESET_TURN]
description: Set the current turn position as <VALUE> (default 0)
gcode:
  {% set value = params.VALUE|default(0)|float %}
  SET_GCODE_VARIABLE MACRO=MOVE_TURN VARIABLE=turn VALUE={value}

[gcode_macro ZERO_TURN]
description: Find 0/360 deg on the turn (a) axis
gcode:
  {% set value = params.VALUE|default(0)|float %}
  MANUAL_STEPPER STEPPER=stepper_a SET_POSITION=0 MOVE=-10 SPEED=10 STOP_ON_ENDSTOP=-1
  MANUAL_STEPPER STEPPER=stepper_a SET_POSITION=0 MOVE=100 SPEED=10 STOP_ON_ENDSTOP=1
  RESET_TURN VALUE=360

[gcode_macro MOVE_TILT]
description: Rotate the tilt by <ANGLE> deg
variable_tilt: 0
gcode:
  {% set angle = params.ANGLE|float %}
  {% set current_tilt = printer["gcode_macro MOVE_TILT"].tilt %}
  {% set rel_move = (angle - current_tilt) * 56 / 80 %}
  MANUAL_STEPPER STEPPER=stepper_b SET_POSITION=0 SPEED=10 MOVE={rel_move}
  SET_GCODE_VARIABLE MACRO=MOVE_TILT VARIABLE=tilt VALUE={angle}

[gcode_macro RESET_TILT]
description: Set the current tilt position as <VALUE> (default 0)
gcode:
  {% set value = params.VALUE|default(0)|float %}

  SET_GCODE_VARIABLE MACRO=MOVE_TILT VARIABLE=tilt VALUE={value}

[gcode_macro ZERO_TILT]
description: Find -80deg on the tilt (b) axis
gcode:
    MANUAL_STEPPER STEPPER=stepper_b SET_POSITION=0 SPEED=15 MOVE=10 STOP_ON_ENDSTOP=-1
    MANUAL_STEPPER STEPPER=stepper_b SET_POSITION=0 SPEED=15 MOVE=-200 STOP_ON_ENDSTOP=1
    RESET_TILT VALUE=-80
    MOVE_TILT ANGLE=-80

[gcode_macro ZERO_ROTATION_AXES ]
description: Find limits of tilt and turn axes
gcode:
    G28 Z
    SERIAL_LOG_INFO MSG="zeroed: z"
    SAVE_GCODE_STATE
    G0 Z40 F500
    RESTORE_GCODE_STATE
    ZERO_TILT
    ZERO_TURN
    SERIAL_LOG_INFO MSG="zeroed: z, turn"
    ZERO_TILT
    SERIAL_LOG_INFO MSG="zeroed: z, turn, tilt"

[gcode_macro HOME_ALL_AXES ]
description: Go to good start position (Tilt=35, Turn=360)
gcode:
    ZERO_ROTATION_AXES
    MOVE_TILT ANGLE=35
    G28 X Y
    SERIAL_LOG_INFO MSG="zeroed: x, y, z, turn, tilt"
    G0 X20 Y75 Z0.1
    G92 X0 Y0 Z0
    MOVE_TURN ANGLE=360
    SERIAL_LOG_INFO MSG="homed: X20 Y75 Z0.1 tilt35 turn360"

[gcode_macro SERIAL_LOG_INFO]
description: Log as info to serial
gcode:
  {action_respond_info(params.MSG)}
